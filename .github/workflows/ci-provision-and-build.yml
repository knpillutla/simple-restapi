name: CI - Build + Terraform + Docker Push

on:
  push:
    branches:
      - '**'  # all branches
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: yourapp
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  # Job 1: Build on ANY branch to verify Maven build success (no docker, no terraform)
  build-only:
    if: always()   # run on every push regardless of branch
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build with Maven
        run: mvn clean package -DskipTests

  # Job 2: Provision terraform & build+push docker ONLY on develop and main branches
  provision-and-deploy:
    needs: build-only
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'

    strategy:
      matrix:
        include:
          - env: dev
            branch: develop
            needs_approval: false
          - env: staging
            branch: main
            needs_approval: false
          - env: prod
            branch: main
            needs_approval: true

    defaults:
      run:
        working-directory: infra/env/${{ matrix.env }}

    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v3

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - run: terraform init

      - run: terraform apply -auto-approve -var-file=terraform.tfvars

  provision-prod:
    needs: provision-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    environment:
      name: prod

    defaults:
      run:
        working-directory: infra/env/prod

    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v3

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - run: terraform init

      - run: terraform apply -auto-approve -var-file=terraform.tfvars

  build-and-push:
    needs: [provision-and-deploy, provision-prod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - run: mvn clean package -DskipTests

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v1

      - name: Set image tag variables
        id: vars
        run: |
          echo "COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_PREFIX }}-${{ env.BRANCH_NAME }}:${{ env.COMMIT_SHA }} .

      - name: Push Docker image
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_PREFIX }}-${{ env.BRANCH_NAME }}:${{ env.COMMIT_SHA }}
