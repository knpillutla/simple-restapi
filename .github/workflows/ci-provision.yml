name: CI - Build, Test, and Provision ECR

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: krishnarepo/simple-restapi
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  build-and-test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build and run tests with Maven
        run: mvn clean package

  provision-ecr:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/ecr
    steps:
      - uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set ECR environment name
        id: ecrenv
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/master" ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "env=dev" >> $GITHUB_OUTPUT
          fi

      - name: Check if ECR exists
        id: check_ecr
        run: |
          REPO_NAME="${{ env.ECR_REPOSITORY_PREFIX }}"
          if aws ecr describe-repositories --repository-names "$REPO_NAME" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init & Apply (only if not exists)
        if: steps.check_ecr.outputs.exists == 'false'
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="ecr_repo_name=${{ env.ECR_REPOSITORY_PREFIX }}" \
            -var="environment=${{ steps.ecrenv.outputs.env }}" \
            -var="aws_region=${{ env.AWS_REGION }}"

  build-test-and-push:
    if: github.event_name == 'push'
    needs: provision-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to fetch all tags for versioning

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build and run tests with Maven
        run: mvn clean package

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v1

      - name: Determine and bump Docker image version (major/minor/patch)
        id: get_tag
        run: |
          git fetch --tags
          LAST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n 1)
          echo "Last tag: $LAST_TAG"

          if [ -z "$LAST_TAG" ]; then
            VERSION="1.0.0"
          else
            VERSION=$(echo "$LAST_TAG" | sed 's/^v//')
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Commit message: $COMMIT_MSG"
            if echo "$COMMIT_MSG" | grep -iq "#major"; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif echo "$COMMIT_MSG" | grep -iq "#minor"; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi

            VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "Next version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag for New Version
        run: |
          NEW_TAG="v${{ steps.get_tag.outputs.version }}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Build, tag, and push Docker image with version
        run: |
          IMAGE_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY_PREFIX }}
          VERSION=${{ steps.get_tag.outputs.version }}
          BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')

          echo "Building Docker image: $IMAGE_URI:$VERSION"
          docker build -t $IMAGE_URI:$VERSION .

          echo "Tagging as latest for branch: $BRANCH"
          docker tag $IMAGE_URI:$VERSION $IMAGE_URI:$BRANCH-latest

          echo "Pushing both tags..."
          docker push $IMAGE_URI:$VERSION
          docker push $IMAGE_URI:$BRANCH-latest
